#+STARTUP: showall
#+OPTIONS: toc:nil
#+TITLE: Rubric: Bitmap Class
#+SUBTITLE: CIS 310: Operating Systems
#+AUTHOR: Brian C. Ladd
#+DATE: Fall 2019

DUE 20201106:1240
COMMITTED:

*REASONS TO STOP ASSESSMENT*
- Failure to compile.
- No =README=
  - No ID block in =README=
  - No instructions on compiling and running
- =.h= / =.cpp= file with no ID block
*REASONS TO STOP ASSESSMENT*

Documentation
- Adequate comments
  - Easy to find ID blocks
  - Class/Function header comments
    - Document *intent* - Why would a programmer call it
    - Parameter types, values, changes documented
    - Return type, values documented
  - Sufficient but succinct in-line comments
    - Let code do most of the explaining
    - Document (or better, improve) difficult to follow bits
  - Citations for code from other places
- Good type, function, and variable names
  - Descriptive names
  - Name length directly proportional to size of scope:
    larger scope -> longer name
- Style
  - Indentation
    - Use only SPACE characters for indent, not TAB
    - Consistent indentation that improves readability
      - Indent between curly braces to show nesting
  - Curly-brace placement
    - Opening curly-brace should NEVER start a line
      - It ends the line with the if/while/for/else on it, doesn't start the next line
    - Closing curly-brace aligns with the BEGINNING of the if/while/for/else line
    - else if is on one line
      - Starts with } (if necessary)
      - else if (<boolean>) follows
      - ends with { (if necessary)
- README
  - Add a Problem Statement
  - Testing Criteria
    - Explain what data was used (include the data in the repo)
      - With each data set, give the expected output
        - This can be in an appropriate file to keep README uncluttered
      - If necessary, explain why that output is expected
    - If a test takes a long time, indicate that
  - Compiling and Running Instructions
    - Include what directory the user should be in for commands
  - INCLUDE DATA FOR SOME COMPUTER.

Design
- Skeleton Code has most of the design.
- Context Switch
  - One loop on either branch of the fork()
  - Timing on only one side, timing a round-trip write/read of one char.
  - Setting affinity on the child process.
- Good design practice:
  MODULES
  - Modules cohesive at a high level of abstraction.
    - Classes within the module obviously related
    - Module well-named and well-documented to make finding the right code easy
  CLASSES
  - Classes/structs used to encapsulate (protect) data
  - Each class has good cohesion
    - Collects up obviously related functionality
    - Well-named to document what it does
    - Limited interface
  FUNCTIONS
  - Each function has *exactly one* concern
    - The function's name reflects exactly what it does
      - The names of parameters similarly document what the value is for
    - The function works at a single level of abstraction
      - Think of a program in layers;
        high-level functions order the calls to lower-level functions
      - Functions are the interface across the layers.
      - Consider a driver: its API is its public functions;
        its implementation are the private functions that do the work.


Implementation
- Good use of =git=
  - Regular commits with clear, concise commit messages
  - Note when tests begin to pass or begin (again?) to fail.
- Never use the =use ...= statement in =.h= files
- Proper error messages if fork fails.
- Proper calculation of single operation running time.

Aesthetics
- Everything is okay
